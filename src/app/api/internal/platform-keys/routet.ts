// src/app/api/internal/platform-keys/route.ts

import { NextRequest, NextResponse } from "next/server";
import { Pool } from "pg";
import { auth } from "@/lib/auth";

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

const INTERNAL_API_SECRET = process.env.INTERNAL_API_SECRET as string;

export async function POST(req: NextRequest) {
  try {
    // 1) Auth: internal secret
    const secret = req.headers.get("x-internal-secret");
    if (secret !== INTERNAL_API_SECRET) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    // 2) Auth: user session
    const session = await auth.api.getSession({ headers: req.headers });
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // 3) Parse + validate body
    const { organizationId, platform, apiKey } = (await req.json()) as {
      organizationId?: string;
      platform?: string;
      apiKey?: string;
    };

    if (!organizationId) {
      return NextResponse.json(
        { error: "organizationId is required" },
        { status: 400 }
      );
    }
    if (!platform) {
      return NextResponse.json(
        { error: "platform is required" },
        { status: 400 }
      );
    }
    if (!apiKey) {
      return NextResponse.json(
        { error: "apiKey is required" },
        { status: 400 }
      );
    }

    // 4) Insert into organizationPlatformKey
    //    If you want id auto‚Äêgenerated by Postgres with gen_random_uuid():
    const insertSQL = `
      INSERT INTO "organizationPlatformKey" 
        (id, "organizationId", platform, "apiKey", "createdAt", "updatedAt")
      VALUES 
        (gen_random_uuid()::text, $1, $2, $3, NOW(), NOW())
      RETURNING id, "organizationId", platform, "apiKey", "createdAt", "updatedAt";
    `;
    const { rows } = await pool.query(insertSQL, [
      organizationId,
      platform,
      apiKey,
    ]);

    const saved = rows[0];

    return NextResponse.json({ key: saved }, { status: 200 });
  } catch (err) {
    console.error("[POST /api/internal/platform-keys] error:", err);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// Optional: reject other HTTP methods with 405
export async function GET() {
  return NextResponse.json({ error: "Method Not Allowed" }, { status: 405 });
}
